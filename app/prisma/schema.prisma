generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"  // Or another database provider (e.g., mysql, sqlite)
  url      = env("DATABASE_URL")  // Make sure you have this variable set in your .env file
}

model User {
  id        String     @id @default(uuid())
  name      String?
  email     String     @unique
  password  String
  active    Boolean
  role      Role       @default(USER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations to groups the user is part of
  groups        Group[]  @relation("GroupMembers")
  blockedGroups Group[]  @relation("BlockedGroups")

  // Relations for messages
  sentMessages  message[] @relation("MessageFrom")
  receivedMessages message[] @relation("MessageTo")

  // Relation to admin in Group
  managedGroups Group[] @relation("AdminGroup")
}

model Group {
  id          String     @id @default(uuid())
  name        String
  description String?
  adminId     String
  admin       User       @relation("AdminGroup", fields: [adminId], references: [id])

  // Members of the group
  members     User[]     @relation("GroupMembers")

  // Blocked users in the group
  blocked     User[]     @relation("BlockedGroups")

  // Add this field for the reverse relation
  messages    message[]  @relation("GroupMessages")

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model message {
  id        String   @id @default(uuid())
  fromId    String
  toId      String?
  from      User     @relation("MessageFrom", fields: [fromId], references: [id])
  to        User?    @relation("MessageTo", fields: [toId], references: [id])
  message   String
  groupId   String?
  group     Group?   @relation("GroupMessages", fields: [groupId], references: [id])
  groupMsg  Boolean
  Status    msgStatus @default(PENDING)
  public    Boolean
  createdAt DateTime
}

model groupInvite {
  id        String   @id @default(uuid()) 
  userId    String
  groupId   String
  invitedAt DateTime @default(now())

  @@unique([userId, groupId])
}

enum msgStatus {
  PENDING
  SENT
  READ
}

enum Role {
  USER
  ADMIN
}
