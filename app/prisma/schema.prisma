// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  name      String?
  email     String   @unique
  password  String
  active    Boolean
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to groups the user is part of
  groups    Group[]  @relation("GroupMembers")

  // Relation to groups where the user has blocked other users
  blockedGroups Group[] @relation("BlockedGroups")
}

model Group {
  id          String   @id @default(uuid())
  name        String
  description String?
  adminId     String
  admin       User     @relation(fields: [adminId], references: [id])

  // Members of the group
  members     User[]   @relation("GroupMembers")

  // Blocked users in the group
  blocked     User[]   @relation("BlockedGroups")

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model message {
  fromId  String
  toId    String? 
  from  User    @relation(fields : [fromId],references : [id])
  to  User    @relation(fields : [toId],references : [id])
  message  String
  groupId   String?
  group     Group?    @relation(fields: [groupId], references: [id])
  group_msg Boolean
  Status  msgStatus @default('PENDING')
  public    Boolean
  createdAt DateTime
}

model groupInvite{
  
}

enum msgStatus{
  PENDING
  SENT
  READ
}

enum Role{
  USER
  ADMIN
}
